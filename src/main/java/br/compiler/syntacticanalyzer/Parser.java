
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package br.compiler.syntacticanalyzer;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\004\006\000\002\005\003" +
    "\000\002\005\002\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\002\000\002\010\005\000\002" +
    "\011\004\000\002\012\007\000\002\012\006\000\002\013" +
    "\004\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\016\004\000\002\016\002\000\002\017\003\000" +
    "\002\020\006\000\002\020\004\000\002\021\005\000\002" +
    "\021\002\000\002\022\003\000\002\023\006\000\002\023" +
    "\005\000\002\024\005\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\006\000\002\027\004\000\002\030" +
    "\005\000\002\031\005\000\002\031\004\000\002\032\005" +
    "\000\002\033\004\000\002\033\003\000\002\034\007\000" +
    "\002\034\011\000\002\035\007\000\002\036\003\000\002" +
    "\036\005\000\002\037\004\000\002\037\005\000\002\040" +
    "\005\000\002\040\002\000\002\041\004\000\002\042\005" +
    "\000\002\042\002\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\005\000\002\043\004\000\002" +
    "\044\006\000\002\045\004\000\002\046\005\000\002\046" +
    "\002\000\002\047\004\000\002\047\002\000\002\050\005" +
    "\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\014\006\031\007\001\002\000\004\002" +
    "\001\001\002\000\004\002\215\001\002\000\004\014\212" +
    "\001\002\000\004\014\010\001\002\000\004\022\012\001" +
    "\002\000\012\020\ufffb\025\ufffb\026\ufffb\027\040\001\002" +
    "\000\010\014\017\021\015\030\014\001\002\000\006\007" +
    "\uffe7\021\uffe7\001\002\000\004\014\017\001\002\000\012" +
    "\020\uffea\025\uffea\026\uffea\027\uffea\001\002\000\004\006" +
    "\032\001\002\000\010\006\uffbe\007\uffbe\016\026\001\002" +
    "\000\006\007\022\021\uffe8\001\002\000\004\021\025\001" +
    "\002\000\006\014\017\030\014\001\002\000\006\007\022" +
    "\021\uffe8\001\002\000\004\021\uffe9\001\002\000\012\020" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\001\002\000\004\014\030" +
    "\001\002\000\006\006\uffc0\007\uffc0\001\002\000\010\006" +
    "\uffbe\007\uffbe\016\026\001\002\000\006\006\uffbf\007\uffbf" +
    "\001\002\000\004\014\033\001\002\000\006\007\uffe5\021" +
    "\uffe5\001\002\000\004\006\035\001\002\000\004\014\036" +
    "\001\002\000\006\007\uffe6\021\uffe6\001\002\000\010\020" +
    "\ufff9\025\ufff9\026\045\001\002\000\004\014\017\001\002" +
    "\000\012\002\ufffe\014\ufffe\020\ufffe\031\ufffe\001\002\000" +
    "\010\020\ufffc\025\ufffc\026\ufffc\001\002\000\004\007\044" +
    "\001\002\000\010\020\ufff6\025\ufff6\026\ufff6\001\002\000" +
    "\004\014\017\001\002\000\006\020\ufff7\025\051\001\002" +
    "\000\006\020\ufffa\025\ufffa\001\002\000\004\020\056\001" +
    "\002\000\006\014\006\031\007\001\002\000\004\020\ufff8" +
    "\001\002\000\010\014\006\020\ufff0\031\007\001\002\000" +
    "\004\020\ufff2\001\002\000\004\020\ufff1\001\002\000\024" +
    "\007\100\014\066\015\073\017\uffed\020\070\023\071\024" +
    "\064\032\063\033\065\001\002\000\012\002\ufffd\014\ufffd" +
    "\020\ufffd\031\ufffd\001\002\000\024\007\uffe0\014\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\023\uffe0\024\uffe0\032\uffe0\033\uffe0" +
    "\001\002\000\024\007\uffdc\014\uffdc\015\uffdc\017\uffdc\020" +
    "\uffdc\023\uffdc\024\uffdc\032\uffdc\033\uffdc\001\002\000\024" +
    "\007\100\014\066\015\073\017\uffed\020\070\023\071\024" +
    "\064\032\063\033\065\001\002\000\004\014\200\001\002" +
    "\000\004\022\174\001\002\000\014\004\117\011\107\013" +
    "\116\014\115\022\106\001\002\000\010\005\163\006\170" +
    "\022\126\001\002\000\004\007\167\001\002\000\020\007" +
    "\100\014\160\015\073\023\071\024\064\032\063\033\065" +
    "\001\002\000\004\022\153\001\002\000\024\007\uffe3\014" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\032\uffe3" +
    "\033\uffe3\001\002\000\006\007\104\022\105\001\002\000" +
    "\004\017\103\001\002\000\024\007\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\023\uffe1\024\uffe1\032\uffe1\033\uffe1\001" +
    "\002\000\024\007\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd" +
    "\023\uffdd\024\uffdd\032\uffdd\033\uffdd\001\002\000\024\007" +
    "\uffde\014\uffde\015\uffde\017\uffde\020\uffde\023\uffde\024\uffde" +
    "\032\uffde\033\uffde\001\002\000\024\007\uffdb\014\uffdb\015" +
    "\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb\032\uffdb\033\uffdb" +
    "\001\002\000\024\007\uffe2\014\uffe2\015\uffe2\017\uffe2\020" +
    "\uffe2\023\uffe2\024\uffe2\032\uffe2\033\uffe2\001\002\000\024" +
    "\007\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\023\uffdf\024" +
    "\uffdf\032\uffdf\033\uffdf\001\002\000\012\002\uffef\014\uffef" +
    "\020\uffef\031\uffef\001\002\000\024\007\uffd6\014\uffd6\015" +
    "\uffd6\017\uffd6\020\uffd6\023\uffd6\024\uffd6\032\uffd6\033\uffd6" +
    "\001\002\000\014\004\117\011\107\013\116\014\115\022" +
    "\106\001\002\000\014\004\117\011\107\013\116\014\115" +
    "\022\106\001\002\000\016\007\uffc5\010\uffc5\012\uffc5\013" +
    "\uffc5\016\uffc5\021\uffc5\001\002\000\014\007\uffca\010\uffca" +
    "\013\123\016\uffca\021\uffca\001\002\000\016\007\uffc4\010" +
    "\uffc4\012\uffc4\013\uffc4\016\uffc4\021\uffc4\001\002\000\004" +
    "\021\144\001\002\000\012\007\uffcf\010\142\016\uffcf\021" +
    "\uffcf\001\002\000\016\007\uffc7\010\uffc7\012\136\013\uffc7" +
    "\016\uffc7\021\uffc7\001\002\000\020\007\uffc6\010\uffc6\012" +
    "\uffc6\013\uffc6\016\uffc6\021\uffc6\022\126\001\002\000\012" +
    "\004\117\011\107\014\115\022\106\001\002\000\012\004" +
    "\117\011\107\014\115\022\106\001\002\000\016\007\uffc2" +
    "\010\uffc2\012\uffc2\013\uffc2\016\uffc2\021\uffc2\001\002\000" +
    "\014\007\uffca\010\uffca\013\123\016\uffca\021\uffca\001\002" +
    "\000\012\007\uffcc\010\uffcc\016\uffcc\021\uffcc\001\002\000" +
    "\012\004\117\011\107\014\115\022\106\001\002\000\014" +
    "\007\uffca\010\uffca\013\123\016\uffca\021\uffca\001\002\000" +
    "\012\007\uffcb\010\uffcb\016\uffcb\021\uffcb\001\002\000\016" +
    "\004\117\011\107\013\116\014\115\021\uffbc\022\106\001" +
    "\002\000\006\016\132\021\uffba\001\002\000\004\021\131" +
    "\001\002\000\016\007\uffc1\010\uffc1\012\uffc1\013\uffc1\016" +
    "\uffc1\021\uffc1\001\002\000\014\004\117\011\107\013\116" +
    "\014\115\022\106\001\002\000\004\021\uffbd\001\002\000" +
    "\006\016\132\021\uffba\001\002\000\004\021\uffbb\001\002" +
    "\000\012\004\117\011\107\014\115\022\106\001\002\000" +
    "\014\007\uffc9\010\uffc9\013\uffc9\016\uffc9\021\uffc9\001\002" +
    "\000\016\007\uffc7\010\uffc7\012\136\013\uffc7\016\uffc7\021" +
    "\uffc7\001\002\000\014\007\uffc8\010\uffc8\013\uffc8\016\uffc8" +
    "\021\uffc8\001\002\000\014\004\117\011\107\013\116\014" +
    "\115\022\106\001\002\000\010\007\uffce\016\uffce\021\uffce" +
    "\001\002\000\004\020\070\001\002\000\004\015\146\001" +
    "\002\000\004\020\070\001\002\000\024\007\uffd1\014\uffd1" +
    "\015\uffd1\017\uffd1\020\uffd1\023\uffd1\024\uffd1\032\uffd1\033" +
    "\uffd1\001\002\000\012\007\uffcd\010\uffcd\016\uffcd\021\uffcd" +
    "\001\002\000\004\021\152\001\002\000\016\007\uffc3\010" +
    "\uffc3\012\uffc3\013\uffc3\016\uffc3\021\uffc3\001\002\000\014" +
    "\004\117\011\107\013\116\014\115\022\106\001\002\000" +
    "\004\021\155\001\002\000\004\020\070\001\002\000\024" +
    "\007\uffd2\014\uffd2\015\uffd2\017\uffd2\020\uffd2\023\uffd2\024" +
    "\uffd2\032\uffd2\033\uffd2\001\002\000\004\017\166\001\002" +
    "\000\006\005\163\022\126\001\002\000\022\007\100\014" +
    "\160\015\073\017\uffd3\023\071\024\064\032\063\033\065" +
    "\001\002\000\004\017\uffd4\001\002\000\014\004\117\011" +
    "\107\013\116\014\115\022\106\001\002\000\004\007\165" +
    "\001\002\000\024\007\uffda\014\uffda\015\uffda\017\uffda\020" +
    "\uffda\023\uffda\024\uffda\032\uffda\033\uffda\001\002\000\024" +
    "\007\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\023\uffd5\024" +
    "\uffd5\032\uffd5\033\uffd5\001\002\000\024\007\uffd9\014\uffd9" +
    "\015\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\032\uffd9\033" +
    "\uffd9\001\002\000\020\007\100\014\160\015\073\023\071" +
    "\024\064\032\063\033\065\001\002\000\024\007\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\023\uffe4\024\uffe4\032\uffe4" +
    "\033\uffe4\001\002\000\004\007\173\001\002\000\024\007" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\023\uffd7\024\uffd7" +
    "\032\uffd7\033\uffd7\001\002\000\014\004\117\011\107\013" +
    "\116\014\115\022\106\001\002\000\004\021\176\001\002" +
    "\000\004\020\070\001\002\000\024\007\uffd0\014\uffd0\015" +
    "\uffd0\017\uffd0\020\uffd0\023\uffd0\024\uffd0\032\uffd0\033\uffd0" +
    "\001\002\000\004\007\201\001\002\000\024\007\uffd8\014" +
    "\uffd8\015\uffd8\017\uffd8\020\uffd8\023\uffd8\024\uffd8\032\uffd8" +
    "\033\uffd8\001\002\000\004\017\uffee\001\002\000\006\020" +
    "\ufff5\025\ufff5\001\002\000\004\006\205\001\002\000\004" +
    "\014\207\001\002\000\004\007\210\001\002\000\004\007" +
    "\uffec\001\002\000\010\014\017\020\ufff3\025\ufff3\001\002" +
    "\000\006\020\ufff4\025\ufff4\001\002\000\004\022\012\001" +
    "\002\000\012\020\ufffb\025\ufffb\026\ufffb\027\040\001\002" +
    "\000\012\002\uffff\014\uffff\020\uffff\031\uffff\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\010\001\001\000\010\004\040\005\036\010" +
    "\041\001\001\000\010\022\017\023\012\045\015\001\001" +
    "\000\002\001\001\000\004\045\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\026\001\001\000\004" +
    "\021\020\001\001\000\002\001\001\000\010\022\022\023" +
    "\012\045\015\001\001\000\004\021\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\045\011\046\001\001" +
    "\000\004\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\202" +
    "\045\203\001\001\000\006\007\047\013\051\001\001\000" +
    "\002\001\001\000\004\015\056\001\001\000\006\003\052" +
    "\014\053\001\001\000\002\001\001\000\006\003\052\014" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\016\073\024\061\025\071\026\074\027\057\030\101\031" +
    "\076\032\100\034\075\035\060\044\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\016" +
    "\201\024\061\025\071\026\074\027\057\030\101\031\076" +
    "\032\100\034\075\035\060\044\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\036\171\037\112\041\107" +
    "\043\113\044\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\025\160\026\074\027\057\030\101\031\076" +
    "\033\156\034\075\035\060\044\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\036\111\037\112\041" +
    "\107\043\113\044\110\001\001\000\014\036\150\037\112" +
    "\041\107\043\113\044\110\001\001\000\002\001\001\000" +
    "\004\040\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\136\001\001\000\002\001" +
    "\001\000\010\041\120\043\113\044\110\001\001\000\006" +
    "\043\117\044\110\001\001\000\002\001\001\000\004\040" +
    "\121\001\001\000\002\001\001\000\010\041\123\043\113" +
    "\044\110\001\001\000\004\040\124\001\001\000\002\001" +
    "\001\000\016\036\126\037\112\041\107\043\113\044\110" +
    "\047\127\001\001\000\004\050\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\036\133\037\112\041\107" +
    "\043\113\044\110\001\001\000\002\001\001\000\004\050" +
    "\134\001\001\000\002\001\001\000\006\043\137\044\110" +
    "\001\001\000\002\001\001\000\004\042\140\001\001\000" +
    "\002\001\001\000\012\037\142\041\107\043\113\044\110" +
    "\001\001\000\002\001\001\000\004\032\144\001\001\000" +
    "\002\001\001\000\004\032\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\036\153\037\112\041\107\043\113\044\110\001\001" +
    "\000\002\001\001\000\004\032\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\160" +
    "\026\074\027\057\030\101\031\076\033\161\034\075\035" +
    "\060\044\066\001\001\000\002\001\001\000\014\036\163" +
    "\037\112\041\107\043\113\044\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\025\170\026\074\027\057\030\101\031\076\034" +
    "\075\035\060\044\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\036\174\037\112\041" +
    "\107\043\113\044\110\001\001\000\002\001\001\000\004" +
    "\032\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\210\045\203\001\001\000\002" +
    "\001\001\000\004\020\212\001\001\000\010\004\213\005" +
    "\036\010\041\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // function ::= IDENTIFIER IDENTIFIER formal_parameters block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function ::= VOID IDENTIFIER formal_parameters block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= block_aux_1 block_aux_2 block_aux_3 body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block_aux_1 ::= labels 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_aux_1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_aux_1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block_aux_2 ::= variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_aux_2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_aux_2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block_aux_3 ::= functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_aux_3",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block_aux_3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_aux_3",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // labels ::= LABELS identifier_list EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables ::= VARS id_list_type_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id_list_type_aux ::= identifier_list COLON type EMPTYSTATEMENT id_list_type_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list_type_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id_list_type_aux ::= identifier_list COLON type EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list_type_aux",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functions ::= FUNCTIONS function_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_aux ::= function function_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_aux",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_aux ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_aux",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= CURLYBRACESL statement_aux CURLYBRACESR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_aux ::= statement statement_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_aux",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_aux",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_parameters ::= PARENTHESESL formal_parameter fp_aux PARENTHESESR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameters ::= PARENTHESESL PARENTHESESR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fp_aux ::= EMPTYSTATEMENT formal_parameter fp_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fp_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_aux",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameter ::= expression_parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_parameter ::= VAR identifier_list COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_parameter",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_parameter ::= identifier_list COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_parameter",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IDENTIFIER COLON unlabeled_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= unlabeled_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= compound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unlabeled_statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unlabeled_statement ::= function_call_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unlabeled_statement ::= goto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unlabeled_statement ::= return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unlabeled_statement ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unlabeled_statement ::= repetitive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unlabeled_statement ::= EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= IDENTIFIER ASSIGNMENTOPERATOR expression EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_call_statement ::= function_call EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // goto ::= GOTO IDENTIFIER EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("goto",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // return ::= RETURN expression EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return ::= KEYWORD EMPTYSTATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compound ::= CURLYBRACESL unlabeled_statement_aux CURLYBRACESR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unlabeled_statement_aux ::= unlabeled_statement unlabeled_statement_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement_aux",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unlabeled_statement_aux ::= unlabeled_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unlabeled_statement_aux",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conditional ::= IF PARENTHESESL expression PARENTHESESR compound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conditional ::= KEYWORD PARENTHESESL expression PARENTHESESR compound KEYWORD compound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // repetitive ::= WHILE PARENTHESESL expression PARENTHESESR compound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetitive",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= simple_expression RELATIONALOPERATOR simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_expression ::= term add_op_term_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_expression ::= ADDITIVEOPERATOR term add_op_term_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // add_op_term_aux ::= ADDITIVEOPERATOR term add_op_term_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_op_term_aux",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // add_op_term_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_op_term_aux",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor mul_op_factor_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mul_op_factor_aux ::= MULTIPLICATIVEOPERATOR factor mul_op_factor_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_op_factor_aux",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mul_op_factor_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_op_factor_aux",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= PARENTHESESL expression PARENTHESESR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= EXCLAMATIONMARK factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_call ::= IDENTIFIER PARENTHESESL expression_list PARENTHESESR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // identifier_list ::= IDENTIFIER id_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id_aux ::= COMMA IDENTIFIER id_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_aux",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_aux",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_list ::= expression expression_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_aux ::= COMMA expression expression_aux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_aux",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_aux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_aux",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
