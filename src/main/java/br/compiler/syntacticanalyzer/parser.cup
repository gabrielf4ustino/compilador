package br.compiler.syntacticanalyzer;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

:};

terminal EXCLAMATIONMARK, ASSIGNMENTOPERATOR, COLON, EMPTYSTATEMENT, RELATIONALOPERATOR, INTEGER, MULTIPLICATIVEOPERATOR, ADDITIVEOPERATOR, IDENTIFIER, KEYWORD, COMMA,
         CURLYBRACESR, CURLYBRACESL, PARENTHESESR, PARENTHESESL, IF, WHILE, FUNCTIONS, VARS, LABELS, VAR, VOID, GOTO, RETURN, BRACKETL, BRACKETR, QUOTATIONMARKS, ALTERNATIVE;

non terminal program, function, block, block_aux_1, block_aux_2, block_aux_3, labels, variables, id_list_type_aux, functions, function_aux, body, statement_aux, type,
            formal_parameters, fp_aux, formal_parameter, expression_parameter, statement, unlabeled_statement, assignment, function_call_statement, goto, return,
            compound, unlabeled_statement_aux, conditional, repetitive, expression, simple_expression, add_op_term_aux, term, mul_op_factor_aux, factor, function_call,
            identifier_list, id_aux, expression_list, expression_aux;

program ::= function;
function ::= IDENTIFIER  IDENTIFIER formal_parameters block | VOID IDENTIFIER formal_parameters block;
block ::= block_aux_1 block_aux_2 block_aux_3 body;
block_aux_1 ::= labels | ;
block_aux_2 ::= variables | ;
block_aux_3 ::= functions | ;
labels ::= LABELS identifier_list EMPTYSTATEMENT;
variables ::= VARS id_list_type_aux;
id_list_type_aux ::= identifier_list COLON type EMPTYSTATEMENT id_list_type_aux | identifier_list COLON type EMPTYSTATEMENT;
functions ::= FUNCTIONS function_aux;
function_aux ::= function function_aux | function;
body ::= CURLYBRACESL statement_aux CURLYBRACESR;
statement_aux ::= statement statement_aux | ;
type ::= IDENTIFIER;
formal_parameters ::= PARENTHESESL formal_parameter fp_aux PARENTHESESR | PARENTHESESL PARENTHESESR;
fp_aux ::= EMPTYSTATEMENT formal_parameter fp_aux | ;
formal_parameter ::= expression_parameter;
expression_parameter ::= VAR identifier_list COLON IDENTIFIER | identifier_list COLON IDENTIFIER;
statement ::= IDENTIFIER COLON unlabeled_statement | unlabeled_statement | compound;
unlabeled_statement ::= assignment | function_call_statement | goto | return | conditional | repetitive | EMPTYSTATEMENT;
assignment ::= IDENTIFIER ASSIGNMENTOPERATOR expression EMPTYSTATEMENT;
function_call_statement ::= function_call EMPTYSTATEMENT;
goto ::= GOTO IDENTIFIER EMPTYSTATEMENT;
return ::= RETURN expression EMPTYSTATEMENT | KEYWORD EMPTYSTATEMENT;
compound ::= CURLYBRACESL unlabeled_statement_aux CURLYBRACESR;
unlabeled_statement_aux ::= unlabeled_statement unlabeled_statement_aux | unlabeled_statement;
conditional ::= IF PARENTHESESL expression PARENTHESESR compound | KEYWORD PARENTHESESL expression PARENTHESESR compound KEYWORD compound;
repetitive ::= WHILE PARENTHESESL expression PARENTHESESR compound;
expression ::= simple_expression | simple_expression RELATIONALOPERATOR simple_expression;
simple_expression ::= term add_op_term_aux | ADDITIVEOPERATOR term add_op_term_aux;
add_op_term_aux ::= ADDITIVEOPERATOR term add_op_term_aux | ;
term ::= factor mul_op_factor_aux;
mul_op_factor_aux ::= MULTIPLICATIVEOPERATOR factor mul_op_factor_aux | ;
factor ::= IDENTIFIER | INTEGER | function_call | PARENTHESESL expression PARENTHESESR | EXCLAMATIONMARK factor;
function_call ::= IDENTIFIER PARENTHESESL expression_list PARENTHESESR;
identifier_list ::= IDENTIFIER id_aux;
id_aux ::= COMMA IDENTIFIER id_aux | ;
expression_list ::= expression expression_aux | ;
expression_aux ::= COMMA expression expression_aux | ;
